// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RegularizadorPolizas.Infrastructure.Data;

#nullable disable

namespace RegularizadorPolizas.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250630214311_AddClientRelatedEntities")]
    partial class AddClientRelatedEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("EsMonedaBase")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Moneda")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Simbolo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal?>("TipoCambio")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique()
                        .HasDatabaseName("IX_Currencies_Codigo");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.ApiKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("ApiVersion")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasDefaultValue("v1");

                    b.Property<string>("BaseUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("EnableLogging")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("EnableRetries")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("Environment")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Production");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("FechaExpiracion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaModificacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("LastUsed")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MaxRequestsPerMinute")
                        .HasColumnType("int");

                    b.Property<string>("Mode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TimeoutSeconds")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(30);

                    b.HasKey("Id");

                    b.HasIndex("Activo")
                        .HasDatabaseName("IX_ApiKeys_Activo");

                    b.HasIndex("Environment")
                        .HasDatabaseName("IX_ApiKeys_Environment");

                    b.HasIndex("FechaExpiracion")
                        .HasDatabaseName("IX_ApiKeys_FechaExpiracion");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasDatabaseName("IX_ApiKeys_Key");

                    b.HasIndex("LastUsed")
                        .HasDatabaseName("IX_ApiKeys_LastUsed");

                    b.HasIndex("TenantId")
                        .IsUnique()
                        .HasDatabaseName("IX_ApiKeys_TenantId");

                    b.HasIndex("Activo", "FechaExpiracion")
                        .HasDatabaseName("IX_ApiKeys_Activo_FechaExpiracion");

                    b.ToTable("ApiKeys", (string)null);
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AdditionalData")
                        .HasColumnType("TEXT");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<long?>("DurationMs")
                        .HasColumnType("bigint");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("EventType")
                        .HasColumnType("int");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("NewValues")
                        .HasColumnType("TEXT");

                    b.Property<string>("OldValues")
                        .HasColumnType("TEXT");

                    b.Property<string>("RequestId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SessionId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("StackTrace")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Success")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TableName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("EntityId");

                    b.HasIndex("EntityName");

                    b.HasIndex("EventType");

                    b.HasIndex("Success");

                    b.HasIndex("Timestamp");

                    b.HasIndex("UserId");

                    b.HasIndex("EntityName", "EntityId");

                    b.HasIndex("UserId", "Timestamp");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.AutorizaCliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AutorizacionesDeDatos")
                        .HasColumnType("int");

                    b.Property<bool>("Autorizado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<int>("Clientes")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("FechaModificacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("AutorizacionesDeDatos")
                        .HasDatabaseName("IX_AutorizacionesCliente_AutorizacionesDeDatos");

                    b.HasIndex("Autorizado")
                        .HasDatabaseName("IX_AutorizacionesCliente_Autorizado");

                    b.HasIndex("Clientes")
                        .HasDatabaseName("IX_AutorizacionesCliente_Clientes");

                    b.HasIndex("Fecha")
                        .HasDatabaseName("IX_AutorizacionesCliente_Fecha");

                    b.ToTable("AutorizacionesCliente", (string)null);
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.AutorizacionDatos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Activo")
                        .HasDatabaseName("IX_AutorizacionesDatos_Activo");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_AutorizacionesDatos_Name");

                    b.ToTable("AutorizacionesDatos");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.Broker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Domicilio")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Foto")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .HasDatabaseName("IX_Brokers_Codigo");

                    b.ToTable("Brokers");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.Calidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Activo")
                        .HasDatabaseName("IX_Calidades_Activo");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Calidades_Name");

                    b.ToTable("Calidades");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Activo")
                        .HasDatabaseName("IX_Categorias_Activo");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Categorias_Name");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.CategoriaCliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("FechaModificacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("ValMax")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal>("ValMin")
                        .HasColumnType("decimal(15,2)");

                    b.HasKey("Id");

                    b.HasIndex("Activo")
                        .HasDatabaseName("IX_CategoriasCliente_Activo");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_CategoriasCliente_Name");

                    b.ToTable("CategoriasCliente", (string)null);
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<int?>("Altura")
                        .HasColumnType("int");

                    b.Property<int?>("App_id")
                        .HasColumnType("int");

                    b.Property<int?>("Categorias_de_cliente")
                        .HasColumnType("int");

                    b.Property<string>("Cli_s_cris")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Clialias")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Cliberkley")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Clibse")
                        .HasColumnType("int");

                    b.Property<string>("Clicargo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Clicasapt")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Clicatlib")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Cliced")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Cliclasif")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Clicon")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Clidir")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Clidircob")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Clidptcob")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Clidptnom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Cliemail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Clifar")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Clifax")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Clifchegr")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Clifching")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Clifchnac")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Clifchnac1")
                        .HasColumnType("datetime(6)");

                    b.Property<byte[]>("Clifoto")
                        .IsRequired()
                        .HasColumnType("LONGBLOB");

                    b.Property<string>("Clihdi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Clilib")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Cliloccob")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Clilocnom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Climapfre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Climetlife")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Clinom")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Clinumrel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Cliobse")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Clipor")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("Cliposcod")
                        .HasColumnType("int");

                    b.Property<string>("Clirsa")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Clirsoc")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Cliruc")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Clisancor")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Clisancris")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Clisbi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Clisex")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Clisurco")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Clitelant")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Clitelcel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Clitelcorr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Clitpo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Clivtoced")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Clivtolib")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Codposcob")
                        .HasColumnType("int");

                    b.Property<int?>("Corrcod")
                        .HasColumnType("int");

                    b.Property<bool>("Doc_digi")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Edo_civil")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Etiquetas")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Fch_ingreso")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("FechaModificacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP");

                    b.Property<int?>("Grupos_economicos")
                        .HasColumnType("int");

                    b.Property<bool>("Habilita_app")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Ing_poliza_mail")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Ing_poliza_wap")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Ing_siniestro_mail")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Ing_siniestro_wap")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Ingresado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Last_update")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Not_bien_mail")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Not_bien_wap")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Noti_obs_sini_mail")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Noti_obs_sini_wap")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("Peso")
                        .HasColumnType("int");

                    b.Property<int?>("Pruebamillares")
                        .HasColumnType("int");

                    b.Property<string>("Referido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Sc_departamentos")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Sc_localidades")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Subcorr")
                        .HasColumnType("int");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Activo")
                        .HasDatabaseName("IX_Clients_Activo");

                    b.HasIndex("Categorias_de_cliente");

                    b.HasIndex("Cliced")
                        .HasDatabaseName("IX_Clients_Cliced");

                    b.HasIndex("Cliemail")
                        .HasDatabaseName("IX_Clients_Cliemail");

                    b.HasIndex("Clinom")
                        .HasDatabaseName("IX_Clients_Nombre");

                    b.HasIndex("Cliruc")
                        .HasDatabaseName("IX_Clients_Cliruc");

                    b.HasIndex("Grupos_economicos");

                    b.HasIndex("Activo", "FechaCreacion")
                        .HasDatabaseName("IX_Clients_Activo_FechaCreacion");

                    b.HasIndex("Corrcod", "Subcorr")
                        .HasDatabaseName("IX_Clients_Corredor");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.CoberturaBicicleta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Activo")
                        .HasDatabaseName("IX_CoberturasBicicleta_Activo");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_CoberturasBicicleta_Name");

                    b.ToTable("CoberturasBicicleta");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.Combustible", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Activo")
                        .HasDatabaseName("IX_Combustibles_Activo");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Combustibles_Name");

                    b.ToTable("Combustibles");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Broker")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Cod_srvcompanias")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Comalias")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Comcntcli")
                        .HasColumnType("int");

                    b.Property<int>("Comcntcon")
                        .HasColumnType("int");

                    b.Property<decimal>("Comcomido")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal>("Comcomipe")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("Comdom")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Comfax")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Comlog")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Comnom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Compredol")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal>("Comprepes")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("Comrazsoc")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Comruc")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Comsumodia")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Comtel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Comtotcomi")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal>("Comtotpre")
                        .HasColumnType("decimal(15,2)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("No_utiles")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Paq_dias")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique()
                        .HasDatabaseName("IX_Companies_Codigo");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.Contacto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CargoRelacion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Cel")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("Clientes")
                        .HasColumnType("int");

                    b.Property<string>("Domicilio")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("FechaModificacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Obs")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("Cel")
                        .HasDatabaseName("IX_Contactos_Cel");

                    b.HasIndex("Clientes")
                        .HasDatabaseName("IX_Contactos_Clientes");

                    b.HasIndex("Mail")
                        .HasDatabaseName("IX_Contactos_Mail");

                    b.HasIndex("Nombre")
                        .HasDatabaseName("IX_Contactos_Nombre");

                    b.ToTable("Contactos", (string)null);
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.CuentaBancaria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Clientes")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("FechaModificacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP");

                    b.Property<string>("MonedaCuenta")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Subcuenta")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Sucursal")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Titular")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Clientes")
                        .HasDatabaseName("IX_CuentasBancarias_Clientes");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_CuentasBancarias_Name");

                    b.HasIndex("Numero")
                        .HasDatabaseName("IX_CuentasBancarias_Numero");

                    b.ToTable("CuentasBancarias", (string)null);
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.Departamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Dptbonint")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Dptnom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ScCod")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Activo")
                        .HasDatabaseName("IX_Departamentos_Activo");

                    b.HasIndex("Dptnom")
                        .IsUnique()
                        .HasDatabaseName("IX_Departamentos_Dptnom");

                    b.HasIndex("ScCod")
                        .HasDatabaseName("IX_Departamentos_ScCod");

                    b.ToTable("Departamentos");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.Destino", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Descod")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Desnom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Activo")
                        .HasDatabaseName("IX_Destinos_Activo");

                    b.HasIndex("Descod")
                        .HasDatabaseName("IX_Destinos_Descod");

                    b.HasIndex("Desnom")
                        .IsUnique()
                        .HasDatabaseName("IX_Destinos_Desnom");

                    b.ToTable("Destinos");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.EdoGestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Activo")
                        .HasDatabaseName("IX_EdosGestion_Activo");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_EdosGestion_Name");

                    b.ToTable("EdosGestion");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.FormaPago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("EsContado")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MaximoCuotas")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("RequiereAutorizacion")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("Activo")
                        .HasDatabaseName("IX_FormasPago_Activo");

                    b.HasIndex("EsContado")
                        .HasDatabaseName("IX_FormasPago_EsContado");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_FormasPago_Name");

                    b.ToTable("FormasPago");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.GrupoEconomico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("FechaModificacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Activo")
                        .HasDatabaseName("IX_GruposEconomicos_Activo");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_GruposEconomicos_Name");

                    b.ToTable("GruposEconomicos", (string)null);
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.MotivoNoRenovacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Activo")
                        .HasDatabaseName("IX_MotivosNoRenovacion_Activo");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_MotivosNoRenovacion_Name");

                    b.ToTable("MotivosNoRenovacion");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Resource")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Permissions_Name");

                    b.HasIndex("Resource", "Action")
                        .IsUnique()
                        .HasDatabaseName("IX_Permissions_Resource_Action");

                    b.ToTable("Permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Action = "Read",
                            CreatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            Description = "View clients",
                            IsActive = true,
                            Name = "clients.read",
                            Resource = "Clients"
                        },
                        new
                        {
                            Id = 2,
                            Action = "Create",
                            CreatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            Description = "Create clients",
                            IsActive = true,
                            Name = "clients.create",
                            Resource = "Clients"
                        },
                        new
                        {
                            Id = 3,
                            Action = "Update",
                            CreatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            Description = "Update clients",
                            IsActive = true,
                            Name = "clients.update",
                            Resource = "Clients"
                        },
                        new
                        {
                            Id = 4,
                            Action = "Delete",
                            CreatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            Description = "Delete clients",
                            IsActive = true,
                            Name = "clients.delete",
                            Resource = "Clients"
                        },
                        new
                        {
                            Id = 5,
                            Action = "Search",
                            CreatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            Description = "Search clients",
                            IsActive = true,
                            Name = "clients.search",
                            Resource = "Clients"
                        },
                        new
                        {
                            Id = 6,
                            Action = "Read",
                            CreatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            Description = "View policies",
                            IsActive = true,
                            Name = "polizas.read",
                            Resource = "Polizas"
                        },
                        new
                        {
                            Id = 7,
                            Action = "Create",
                            CreatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            Description = "Create policies",
                            IsActive = true,
                            Name = "polizas.create",
                            Resource = "Polizas"
                        },
                        new
                        {
                            Id = 8,
                            Action = "Update",
                            CreatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            Description = "Update policies",
                            IsActive = true,
                            Name = "polizas.update",
                            Resource = "Polizas"
                        },
                        new
                        {
                            Id = 9,
                            Action = "Delete",
                            CreatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            Description = "Delete policies",
                            IsActive = true,
                            Name = "polizas.delete",
                            Resource = "Polizas"
                        },
                        new
                        {
                            Id = 10,
                            Action = "Renew",
                            CreatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            Description = "Renew policies",
                            IsActive = true,
                            Name = "polizas.renew",
                            Resource = "Polizas"
                        },
                        new
                        {
                            Id = 11,
                            Action = "Search",
                            CreatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            Description = "Search policies",
                            IsActive = true,
                            Name = "polizas.search",
                            Resource = "Polizas"
                        },
                        new
                        {
                            Id = 12,
                            Action = "Read",
                            CreatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            Description = "View documents",
                            IsActive = true,
                            Name = "documents.read",
                            Resource = "Documents"
                        },
                        new
                        {
                            Id = 13,
                            Action = "Upload",
                            CreatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            Description = "Upload documents",
                            IsActive = true,
                            Name = "documents.upload",
                            Resource = "Documents"
                        },
                        new
                        {
                            Id = 14,
                            Action = "Process",
                            CreatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            Description = "Process documents",
                            IsActive = true,
                            Name = "documents.process",
                            Resource = "Documents"
                        },
                        new
                        {
                            Id = 15,
                            Action = "Delete",
                            CreatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            Description = "Delete documents",
                            IsActive = true,
                            Name = "documents.delete",
                            Resource = "Documents"
                        },
                        new
                        {
                            Id = 16,
                            Action = "Read",
                            CreatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            Description = "View brokers",
                            IsActive = true,
                            Name = "brokers.read",
                            Resource = "Brokers"
                        },
                        new
                        {
                            Id = 17,
                            Action = "Create",
                            CreatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            Description = "Create brokers",
                            IsActive = true,
                            Name = "brokers.create",
                            Resource = "Brokers"
                        },
                        new
                        {
                            Id = 18,
                            Action = "Update",
                            CreatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            Description = "Update brokers",
                            IsActive = true,
                            Name = "brokers.update",
                            Resource = "Brokers"
                        },
                        new
                        {
                            Id = 19,
                            Action = "Delete",
                            CreatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            Description = "Delete brokers",
                            IsActive = true,
                            Name = "brokers.delete",
                            Resource = "Brokers"
                        },
                        new
                        {
                            Id = 20,
                            Action = "Read",
                            CreatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            Description = "View companies",
                            IsActive = true,
                            Name = "companies.read",
                            Resource = "Companies"
                        },
                        new
                        {
                            Id = 21,
                            Action = "Create",
                            CreatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            Description = "Create companies",
                            IsActive = true,
                            Name = "companies.create",
                            Resource = "Companies"
                        },
                        new
                        {
                            Id = 22,
                            Action = "Update",
                            CreatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            Description = "Update companies",
                            IsActive = true,
                            Name = "companies.update",
                            Resource = "Companies"
                        },
                        new
                        {
                            Id = 23,
                            Action = "Delete",
                            CreatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            Description = "Delete companies",
                            IsActive = true,
                            Name = "companies.delete",
                            Resource = "Companies"
                        },
                        new
                        {
                            Id = 24,
                            Action = "Read",
                            CreatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            Description = "View currencies",
                            IsActive = true,
                            Name = "currencies.read",
                            Resource = "Currencies"
                        },
                        new
                        {
                            Id = 25,
                            Action = "Create",
                            CreatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            Description = "Create currencies",
                            IsActive = true,
                            Name = "currencies.create",
                            Resource = "Currencies"
                        },
                        new
                        {
                            Id = 26,
                            Action = "Update",
                            CreatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            Description = "Update currencies",
                            IsActive = true,
                            Name = "currencies.update",
                            Resource = "Currencies"
                        },
                        new
                        {
                            Id = 27,
                            Action = "Delete",
                            CreatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            Description = "Delete currencies",
                            IsActive = true,
                            Name = "currencies.delete",
                            Resource = "Currencies"
                        },
                        new
                        {
                            Id = 28,
                            Action = "Read",
                            CreatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            Description = "View renovations",
                            IsActive = true,
                            Name = "renovations.read",
                            Resource = "Renovations"
                        },
                        new
                        {
                            Id = 29,
                            Action = "Create",
                            CreatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            Description = "Create renovations",
                            IsActive = true,
                            Name = "renovations.create",
                            Resource = "Renovations"
                        },
                        new
                        {
                            Id = 30,
                            Action = "Process",
                            CreatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            Description = "Process renovations",
                            IsActive = true,
                            Name = "renovations.process",
                            Resource = "Renovations"
                        },
                        new
                        {
                            Id = 31,
                            Action = "Cancel",
                            CreatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            Description = "Cancel renovations",
                            IsActive = true,
                            Name = "renovations.cancel",
                            Resource = "Renovations"
                        },
                        new
                        {
                            Id = 32,
                            Action = "ManageUsers",
                            CreatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            Description = "Manage users",
                            IsActive = true,
                            Name = "admin.users.manage",
                            Resource = "Admin"
                        },
                        new
                        {
                            Id = 33,
                            Action = "ManageRoles",
                            CreatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            Description = "Manage roles",
                            IsActive = true,
                            Name = "admin.roles.manage",
                            Resource = "Admin"
                        },
                        new
                        {
                            Id = 34,
                            Action = "ManagePermissions",
                            CreatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            Description = "Manage permissions",
                            IsActive = true,
                            Name = "admin.permissions.manage",
                            Resource = "Admin"
                        },
                        new
                        {
                            Id = 35,
                            Action = "ReadAudit",
                            CreatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            Description = "View audit logs",
                            IsActive = true,
                            Name = "admin.audit.read",
                            Resource = "Admin"
                        },
                        new
                        {
                            Id = 36,
                            Action = "SystemConfig",
                            CreatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            Description = "System configuration",
                            IsActive = true,
                            Name = "admin.system.config",
                            Resource = "Admin"
                        },
                        new
                        {
                            Id = 37,
                            Action = "Read",
                            CreatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            Description = "View reports",
                            IsActive = true,
                            Name = "reports.read",
                            Resource = "Reports"
                        },
                        new
                        {
                            Id = 38,
                            Action = "Export",
                            CreatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            Description = "Export reports",
                            IsActive = true,
                            Name = "reports.export",
                            Resource = "Reports"
                        });
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.Poliza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Aereo")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("App_id")
                        .HasColumnType("int");

                    b.Property<int?>("Asignado")
                        .HasColumnType("int");

                    b.Property<int?>("Caldsc")
                        .HasColumnType("int");

                    b.Property<int?>("Cancecod")
                        .HasColumnType("int");

                    b.Property<int?>("Cat_cli")
                        .HasColumnType("int");

                    b.Property<int?>("Catdsc")
                        .HasColumnType("int");

                    b.Property<string>("Clausula")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Clinom")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<int?>("Clinro")
                        .HasColumnType("int");

                    b.Property<int?>("Clinro1")
                        .HasColumnType("int");

                    b.Property<decimal?>("Clipcupfia")
                        .HasColumnType("decimal(15,2)");

                    b.Property<int?>("Coberturas_bicicleta")
                        .HasColumnType("int");

                    b.Property<string>("Com_alias")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<int?>("Com_bo")
                        .HasColumnType("int");

                    b.Property<int?>("Com_bro")
                        .HasColumnType("int");

                    b.Property<int?>("Com_sub_corr")
                        .HasColumnType("int");

                    b.Property<string>("Combustibles")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("Comcod")
                        .HasColumnType("int");

                    b.Property<int?>("Comcod1")
                        .HasColumnType("int");

                    b.Property<int?>("Comcod2")
                        .HasColumnType("int");

                    b.Property<string>("Conaccicer")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("Conafesin")
                        .HasColumnType("int");

                    b.Property<int?>("Conanioaut")
                        .HasColumnType("int");

                    b.Property<string>("Conautcome")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("Conautcor")
                        .HasColumnType("int");

                    b.Property<bool>("Conautcort")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Conautnd")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Conbanemb")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("Conbonant")
                        .HasColumnType("int");

                    b.Property<int?>("Conbonnsin")
                        .HasColumnType("int");

                    b.Property<string>("Concalcom")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<decimal?>("Concan")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal?>("Concapase")
                        .HasColumnType("decimal(15,2)");

                    b.Property<int?>("Concapaut")
                        .HasColumnType("int");

                    b.Property<decimal?>("Concapla")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal?>("Concapret")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("Concar")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("Concaraut")
                        .HasColumnType("int");

                    b.Property<string>("Concaucan")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Concaudsc")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("Concerfin")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Concesnom")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Concestel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Conchasis")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("Conclaaut")
                        .HasColumnType("int");

                    b.Property<string>("Conclaemb")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Conclieda")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("Concodrev")
                        .HasColumnType("int");

                    b.Property<decimal?>("Concomcorr")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime?>("Concomdes")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("Concomotr")
                        .HasColumnType("decimal(15,2)");

                    b.Property<int?>("Conconesp")
                        .HasColumnType("int");

                    b.Property<string>("Conconf")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("Concuo")
                        .HasColumnType("int");

                    b.Property<string>("Condecaju")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<decimal?>("Condecpri")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal?>("Condecpro")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal?>("Condecptj")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("Condecram")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Condecrea")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<int?>("Condedaut")
                        .HasColumnType("int");

                    b.Property<int?>("Condednum")
                        .HasColumnType("int");

                    b.Property<string>("Condedurc")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Condeta")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Condetail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Condetemb")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Condetrc")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Condom")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Conedaret")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("Conend")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("Conesp")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Conespbon")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Confabemb")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("Confchcan")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Confchdes")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Confchhas")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Conficto")
                        .HasColumnType("int");

                    b.Property<decimal?>("Conflota")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal?>("Conflotimp")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal?>("Conflotsaldo")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal?>("Conflottotal")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal?>("Congar")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("Congaran")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Congarantel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Conges")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Congeses")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("Congesfi")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Congesti")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Congrucon")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("Conidpad")
                        .HasColumnType("int");

                    b.Property<decimal?>("Conimp")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal?>("Conimprf")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("Conincuno")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Coning")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Conlimnav")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<int?>("Conlinflot")
                        .HasColumnType("int");

                    b.Property<int?>("Conlinrie")
                        .HasColumnType("int");

                    b.Property<string>("Conmaraut")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Conmataut")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Conmatemb")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Conmatpar")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Conmatriemb")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Conmatte")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Conmedtra")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Conmotor")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Connomemb")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<int?>("Connroint")
                        .HasColumnType("int");

                    b.Property<string>("Connrorc")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("Connroser")
                        .HasColumnType("int");

                    b.Property<decimal?>("Conobjtot")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("Conpadaut")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("Conpadend")
                        .HasColumnType("int");

                    b.Property<int?>("Conpadre")
                        .HasColumnType("int");

                    b.Property<string>("Conpol")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<decimal?>("Conpremio")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal?>("Conpricap")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("Conptoemb")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<decimal?>("Conrecfin")
                        .HasColumnType("decimal(15,2)");

                    b.Property<int?>("Conresciv")
                        .HasColumnType("int");

                    b.Property<int?>("Conriecod")
                        .HasColumnType("int");

                    b.Property<string>("Conriedsc")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Consta")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<decimal?>("Consumsal")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("Contipoemp")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<decimal?>("Contot")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal?>("Contotant")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal?>("Contotpri")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("Contpoact")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Contpocob")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Contpoemb")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Contpoemp")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Contra")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Conubi")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<decimal?>("Convalacr")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal?>("Convallet")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("Convelemb")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Conviaa")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<decimal?>("Conviacos")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("Conviades")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Conviaenb")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Conviafac")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<decimal?>("Conviafle")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal?>("Conviagas")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal?>("Conviakb")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal?>("Conviakn")
                        .HasColumnType("decimal(15,2)");

                    b.Property<int?>("Conviamon")
                        .HasColumnType("int");

                    b.Property<decimal?>("Conviapri")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal?>("Conviarec")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal?>("Conviatot")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("Conviatpo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Conviatra")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Convig")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("Corrnom")
                        .HasColumnType("int");

                    b.Property<string>("Cotizacion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Desdsc")
                        .HasColumnType("int");

                    b.Property<string>("DocumentoPdf")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("Dptnom")
                        .HasColumnType("int");

                    b.Property<bool>("Enviado")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Exportacion")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Facturacion")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Flocod")
                        .HasColumnType("int");

                    b.Property<string>("Forpagvid")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Gestion")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<bool>("Granizo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Idorden")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("Importacion")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Ingresado")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Last_update")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Leer")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Leer_obs")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Lincarta")
                        .HasColumnType("int");

                    b.Property<int?>("Linexclu")
                        .HasColumnType("int");

                    b.Property<int?>("Lininclu")
                        .HasColumnType("int");

                    b.Property<int?>("Linobs")
                        .HasColumnType("int");

                    b.Property<bool>("Llamar")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Maritimo")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Max_aereo")
                        .HasColumnType("int");

                    b.Property<int?>("Max_mar")
                        .HasColumnType("int");

                    b.Property<int?>("Max_terrestre")
                        .HasColumnType("int");

                    b.Property<bool>("Mis_rie")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Modcod")
                        .HasColumnType("int");

                    b.Property<int?>("Moncod")
                        .HasColumnType("int");

                    b.Property<string>("Mot_no_ren")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("Motivos_no_renovacion")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Offshore")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Otrcorrcod")
                        .HasColumnType("int");

                    b.Property<int?>("Padreaux")
                        .HasColumnType("int");

                    b.Property<int?>("Pagos_efectivo")
                        .HasColumnType("int");

                    b.Property<bool>("Procesado")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Productos_de_vida")
                        .HasColumnType("int");

                    b.Property<string>("Ramo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Rieres")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("Seccod")
                        .HasColumnType("int");

                    b.Property<bool>("Sob_recib")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Sublistas")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Tarcod")
                        .HasColumnType("int");

                    b.Property<decimal?>("Tasa")
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("Terrestre")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Tiene_alarma")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Tipos_de_alarma")
                        .HasColumnType("int");

                    b.Property<int?>("Tpoconcod")
                        .HasColumnType("int");

                    b.Property<int?>("Tporiecod")
                        .HasColumnType("int");

                    b.Property<string>("Tposegdsc")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<int?>("Tpovivcod")
                        .HasColumnType("int");

                    b.Property<bool>("Transito_interno")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Update_date")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Var_ubi")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("Activo");

                    b.HasIndex("Clinro");

                    b.HasIndex("Comcod");

                    b.HasIndex("Confchdes");

                    b.HasIndex("Confchhas");

                    b.HasIndex("Conmataut");

                    b.HasIndex("Conpadre");

                    b.HasIndex("Conpol");

                    b.HasIndex("Corrnom");

                    b.HasIndex("Moncod");

                    b.ToTable("Polizas");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.ProcessDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EstadoProcesamiento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaProcesamiento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NombreArchivo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("PolizaId")
                        .HasColumnType("int");

                    b.Property<string>("ResultadoJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RutaArchivo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TipoDocumento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PolizaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("ProcessDocuments");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.Renovation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaSolicitud")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PolizaId")
                        .HasColumnType("int");

                    b.Property<int?>("PolizaNuevaId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PolizaId");

                    b.HasIndex("PolizaNuevaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Renovations");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Roles_Name");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            Description = "Full system access",
                            IsActive = true,
                            Name = "SuperAdmin",
                            UpdatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            Description = "Administrative access",
                            IsActive = true,
                            Name = "Admin",
                            UpdatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            Description = "Management access",
                            IsActive = true,
                            Name = "Manager",
                            UpdatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            Description = "Operational access",
                            IsActive = true,
                            Name = "Operator",
                            UpdatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            Description = "Read-only access",
                            IsActive = true,
                            Name = "Viewer",
                            UpdatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            Description = "Client portal access",
                            IsActive = true,
                            Name = "Client",
                            UpdatedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364)
                        });
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("GrantedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("GrantedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GrantedBy");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("IX_RolePermissions_PermissionId");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("IX_RolePermissions_RoleId");

                    b.HasIndex("RoleId", "PermissionId")
                        .IsUnique()
                        .HasDatabaseName("IX_RolePermissions_Role_Permission");

                    b.ToTable("RolePermissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 3,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 4,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 5,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 5,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 6,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 6,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 7,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 7,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 8,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 8,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 9,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 9,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 10,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 10,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 11,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 11,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 12,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 12,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 13,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 13,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 14,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 14,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 15,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 15,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 16,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 16,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 17,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 17,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 18,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 18,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 19,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 19,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 20,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 20,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 21,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 21,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 22,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 22,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 23,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 23,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 24,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 24,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 25,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 25,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 26,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 26,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 27,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 27,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 28,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 28,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 29,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 29,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 30,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 30,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 31,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 31,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 32,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 32,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 33,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 33,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 34,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 34,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 35,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 35,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 36,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 36,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 37,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 37,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 38,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 38,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 39,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 40,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 41,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 42,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 43,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 5,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 44,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 6,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 45,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 7,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 46,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 8,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 47,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 9,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 48,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 10,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 49,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 11,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 50,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 12,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 51,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 13,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 52,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 14,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 53,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 15,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 54,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 16,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 55,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 17,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 56,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 18,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 57,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 19,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 58,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 20,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 59,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 21,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 60,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 22,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 61,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 23,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 62,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 24,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 63,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 25,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 64,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 26,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 65,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 27,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 66,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 28,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 67,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 29,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 68,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 30,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 69,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 31,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 70,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 32,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 71,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 33,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 72,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 34,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 73,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 35,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 74,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 37,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 75,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 38,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 76,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 1,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 77,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 2,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 78,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 3,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 79,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 5,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 80,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 6,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 81,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 7,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 82,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 8,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 83,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 10,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 84,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 11,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 85,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 12,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 86,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 13,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 87,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 14,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 88,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 16,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 89,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 17,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 90,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 18,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 91,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 20,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 92,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 21,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 93,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 22,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 94,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 24,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 95,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 25,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 96,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 26,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 97,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 28,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 98,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 29,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 99,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 30,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 100,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 37,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 101,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 1,
                            RoleId = 4
                        },
                        new
                        {
                            Id = 102,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 5,
                            RoleId = 4
                        },
                        new
                        {
                            Id = 103,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 6,
                            RoleId = 4
                        },
                        new
                        {
                            Id = 104,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 7,
                            RoleId = 4
                        },
                        new
                        {
                            Id = 105,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 8,
                            RoleId = 4
                        },
                        new
                        {
                            Id = 106,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 11,
                            RoleId = 4
                        },
                        new
                        {
                            Id = 107,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 12,
                            RoleId = 4
                        },
                        new
                        {
                            Id = 108,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 13,
                            RoleId = 4
                        },
                        new
                        {
                            Id = 109,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 16,
                            RoleId = 4
                        },
                        new
                        {
                            Id = 110,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 17,
                            RoleId = 4
                        },
                        new
                        {
                            Id = 111,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 20,
                            RoleId = 4
                        },
                        new
                        {
                            Id = 112,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 24,
                            RoleId = 4
                        },
                        new
                        {
                            Id = 113,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 28,
                            RoleId = 4
                        },
                        new
                        {
                            Id = 114,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 29,
                            RoleId = 4
                        },
                        new
                        {
                            Id = 115,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 1,
                            RoleId = 5
                        },
                        new
                        {
                            Id = 116,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 5,
                            RoleId = 5
                        },
                        new
                        {
                            Id = 117,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 6,
                            RoleId = 5
                        },
                        new
                        {
                            Id = 118,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 11,
                            RoleId = 5
                        },
                        new
                        {
                            Id = 119,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 12,
                            RoleId = 5
                        },
                        new
                        {
                            Id = 120,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 16,
                            RoleId = 5
                        },
                        new
                        {
                            Id = 121,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 20,
                            RoleId = 5
                        },
                        new
                        {
                            Id = 122,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 24,
                            RoleId = 5
                        },
                        new
                        {
                            Id = 123,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 28,
                            RoleId = 5
                        },
                        new
                        {
                            Id = 124,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 37,
                            RoleId = 5
                        },
                        new
                        {
                            Id = 125,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 6,
                            RoleId = 6
                        },
                        new
                        {
                            Id = 126,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 12,
                            RoleId = 6
                        },
                        new
                        {
                            Id = 127,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 28,
                            RoleId = 6
                        },
                        new
                        {
                            Id = 128,
                            GrantedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            PermissionId = 29,
                            RoleId = 6
                        });
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.Seccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Icono")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Activo")
                        .HasDatabaseName("IX_Secciones_Activo");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Secciones_Name");

                    b.ToTable("Secciones");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.Taller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CTMA")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Cel")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Contacto")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("Disponible24h")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Tarjeta")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Web")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_Talleres_Email");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Talleres_Name");

                    b.HasIndex("Telefono")
                        .HasDatabaseName("IX_Talleres_Telefono");

                    b.ToTable("Talleres");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.Tarjeta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Clientes")
                        .HasColumnType("int");

                    b.Property<int>("Con")
                        .HasColumnType("int");

                    b.Property<string>("Control")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("Dato")
                        .HasColumnType("int");

                    b.Property<string>("Emisor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("FechaModificacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Titular")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Vencimiento")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Clientes")
                        .HasDatabaseName("IX_Tarjetas_Clientes");

                    b.HasIndex("Emisor")
                        .HasDatabaseName("IX_Tarjetas_Emisor");

                    b.HasIndex("Vencimiento")
                        .HasDatabaseName("IX_Tarjetas_Vencimiento");

                    b.ToTable("Tarjetas", (string)null);
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.TipoAlarma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Activo")
                        .HasDatabaseName("IX_TiposAlarma_Activo");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_TiposAlarma_Name");

                    b.ToTable("TiposAlarma");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.TipoContrato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Secciones")
                        .HasColumnType("int");

                    b.Property<string>("TpoConDssc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TpoDet")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("Activo")
                        .HasDatabaseName("IX_TiposContrato_Activo");

                    b.HasIndex("TpoConDssc")
                        .IsUnique()
                        .HasDatabaseName("IX_TiposContrato_TpoConDssc");

                    b.ToTable("TiposContrato");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.TipoRiesgo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RieDesc")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("TpoRieDssc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Activo")
                        .HasDatabaseName("IX_TiposRiesgo_Activo");

                    b.HasIndex("TpoRieDssc")
                        .IsUnique()
                        .HasDatabaseName("IX_TiposRiesgo_TpoRieDssc");

                    b.ToTable("TiposRiesgo");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.TipoSiniestro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Activo")
                        .HasDatabaseName("IX_TiposSiniestro_Activo");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_TiposSiniestro_Name");

                    b.ToTable("TiposSiniestro");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("FechaModificacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Email");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AssignedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("AssignedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssignedBy");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("IX_UserRoles_RoleId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_UserRoles_UserId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique()
                        .HasDatabaseName("IX_UserRoles_User_Role");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssignedAt = new DateTime(2025, 6, 30, 21, 43, 10, 861, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            RoleId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.AuditLog", b =>
                {
                    b.HasOne("RegularizadorPolizas.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.AutorizaCliente", b =>
                {
                    b.HasOne("RegularizadorPolizas.Domain.Entities.AutorizacionDatos", "AutorizacionDatos")
                        .WithMany()
                        .HasForeignKey("AutorizacionesDeDatos")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RegularizadorPolizas.Domain.Entities.Client", "Cliente")
                        .WithMany("AutorizacionesCliente")
                        .HasForeignKey("Clientes")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AutorizacionDatos");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.Client", b =>
                {
                    b.HasOne("RegularizadorPolizas.Domain.Entities.CategoriaCliente", "CategoriaCliente")
                        .WithMany("Clientes")
                        .HasForeignKey("Categorias_de_cliente")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("RegularizadorPolizas.Domain.Entities.GrupoEconomico", "GrupoEconomico")
                        .WithMany("Clientes")
                        .HasForeignKey("Grupos_economicos")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CategoriaCliente");

                    b.Navigation("GrupoEconomico");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.Contacto", b =>
                {
                    b.HasOne("RegularizadorPolizas.Domain.Entities.Client", "Cliente")
                        .WithMany("Contactos")
                        .HasForeignKey("Clientes")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.CuentaBancaria", b =>
                {
                    b.HasOne("RegularizadorPolizas.Domain.Entities.Client", "Cliente")
                        .WithMany("CuentasBancarias")
                        .HasForeignKey("Clientes")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.Poliza", b =>
                {
                    b.HasOne("RegularizadorPolizas.Domain.Entities.Client", "Client")
                        .WithMany("Polizas")
                        .HasForeignKey("Clinro")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RegularizadorPolizas.Domain.Entities.Company", "Company")
                        .WithMany("Polizas")
                        .HasForeignKey("Comcod")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RegularizadorPolizas.Domain.Entities.Poliza", "PolizaPadre")
                        .WithMany("PolizasHijas")
                        .HasForeignKey("Conpadre")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RegularizadorPolizas.Domain.Entities.Broker", "Broker")
                        .WithMany("Polizas")
                        .HasForeignKey("Corrnom")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Currency", "Currency")
                        .WithMany("Polizas")
                        .HasForeignKey("Moncod")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Broker");

                    b.Navigation("Client");

                    b.Navigation("Company");

                    b.Navigation("Currency");

                    b.Navigation("PolizaPadre");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.ProcessDocument", b =>
                {
                    b.HasOne("RegularizadorPolizas.Domain.Entities.Poliza", "Poliza")
                        .WithMany("ProcessDocuments")
                        .HasForeignKey("PolizaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RegularizadorPolizas.Domain.Entities.User", "User")
                        .WithMany("ProcessDocuments")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Poliza");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.Renovation", b =>
                {
                    b.HasOne("RegularizadorPolizas.Domain.Entities.Poliza", "PolizaOriginal")
                        .WithMany("RenovacionesOrigen")
                        .HasForeignKey("PolizaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RegularizadorPolizas.Domain.Entities.Poliza", "PolizaNueva")
                        .WithMany("RenovacionesDestino")
                        .HasForeignKey("PolizaNuevaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RegularizadorPolizas.Domain.Entities.User", "User")
                        .WithMany("Renovations")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("PolizaNueva");

                    b.Navigation("PolizaOriginal");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("RegularizadorPolizas.Domain.Entities.User", "GrantedByUser")
                        .WithMany()
                        .HasForeignKey("GrantedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("RegularizadorPolizas.Domain.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RegularizadorPolizas.Domain.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GrantedByUser");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.Tarjeta", b =>
                {
                    b.HasOne("RegularizadorPolizas.Domain.Entities.Client", "Cliente")
                        .WithMany("Tarjetas")
                        .HasForeignKey("Clientes")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("RegularizadorPolizas.Domain.Entities.User", "AssignedByUser")
                        .WithMany()
                        .HasForeignKey("AssignedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("RegularizadorPolizas.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RegularizadorPolizas.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedByUser");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Currency", b =>
                {
                    b.Navigation("Polizas");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.Broker", b =>
                {
                    b.Navigation("Polizas");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.CategoriaCliente", b =>
                {
                    b.Navigation("Clientes");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.Client", b =>
                {
                    b.Navigation("AutorizacionesCliente");

                    b.Navigation("Contactos");

                    b.Navigation("CuentasBancarias");

                    b.Navigation("Polizas");

                    b.Navigation("Tarjetas");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.Company", b =>
                {
                    b.Navigation("Polizas");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.GrupoEconomico", b =>
                {
                    b.Navigation("Clientes");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.Poliza", b =>
                {
                    b.Navigation("PolizasHijas");

                    b.Navigation("ProcessDocuments");

                    b.Navigation("RenovacionesDestino");

                    b.Navigation("RenovacionesOrigen");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.User", b =>
                {
                    b.Navigation("ProcessDocuments");

                    b.Navigation("Renovations");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
