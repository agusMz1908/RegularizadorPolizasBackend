// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RegularizadorPolizas.Infrastructure.Data;

#nullable disable

namespace RegularizadorPolizas.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250527174709_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.Broker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Domicilio")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .HasDatabaseName("IX_Brokers_Codigo");

                    b.ToTable("Brokers");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Altura")
                        .HasColumnType("int");

                    b.Property<int?>("App_id")
                        .HasColumnType("int");

                    b.Property<int?>("Categorias_de_cliente")
                        .HasColumnType("int");

                    b.Property<string>("Cli_s_cris")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Clialias")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Cliberkley")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Clibse")
                        .HasColumnType("int");

                    b.Property<string>("Clicargo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Clicasapt")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Clicatlib")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Cliced")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Cliclasif")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Clicon")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Clidir")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Clidircob")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Clidptcob")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Clidptnom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Cliemail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Clifar")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Clifax")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Clifchegr")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Clifching")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Clifchnac")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Clifchnac1")
                        .HasColumnType("datetime(6)");

                    b.Property<byte[]>("Clifoto")
                        .IsRequired()
                        .HasColumnType("LONGBLOB");

                    b.Property<string>("Clihdi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Clilib")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Cliloccob")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Clilocnom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Climapfre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Climetlife")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Clinom")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Clinumrel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Cliobse")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Clipor")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("Cliposcod")
                        .HasColumnType("int");

                    b.Property<string>("Clirsa")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Clirsoc")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Cliruc")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Clisancor")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Clisancris")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Clisbi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Clisex")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Clisurco")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Clitelant")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Clitelcel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Clitelcorr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Clitpo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Clivtoced")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Clivtolib")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Codposcob")
                        .HasColumnType("int");

                    b.Property<int?>("Corrcod")
                        .HasColumnType("int");

                    b.Property<bool>("Doc_digi")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Edo_civil")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Etiquetas")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Fch_ingreso")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Grupos_economicos")
                        .HasColumnType("int");

                    b.Property<bool>("Habilita_app")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Ing_poliza_mail")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Ing_poliza_wap")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Ing_siniestro_mail")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Ing_siniestro_wap")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Ingresado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Last_update")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Not_bien_mail")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Not_bien_wap")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Noti_obs_sini_mail")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Noti_obs_sini_wap")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("Peso")
                        .HasColumnType("int");

                    b.Property<int?>("Pruebamillares")
                        .HasColumnType("int");

                    b.Property<string>("Referido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Sc_departamentos")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Sc_localidades")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Subcorr")
                        .HasColumnType("int");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Cliced")
                        .HasDatabaseName("IX_Clients_Cliced");

                    b.HasIndex("Cliemail")
                        .HasDatabaseName("IX_Clients_Cliemail");

                    b.HasIndex("Cliruc")
                        .HasDatabaseName("IX_Clients_Cliruc");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique()
                        .HasDatabaseName("IX_Companies_Codigo");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Alias = "BSE",
                            Codigo = "BSE",
                            Nombre = "Banco de Seguros del Estado"
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            Alias = "SURA",
                            Codigo = "SURA",
                            Nombre = "SURA Uruguay"
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            Alias = "MAPFRE",
                            Codigo = "MAPFRE",
                            Nombre = "Mapfre Uruguay"
                        },
                        new
                        {
                            Id = 4,
                            Activo = true,
                            Alias = "SAN CRISTOBAL",
                            Codigo = "SC",
                            Nombre = "San Cristóbal"
                        });
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Simbolo")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique()
                        .HasDatabaseName("IX_Currencies_Codigo");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Codigo = "UYU",
                            Nombre = "Peso Uruguayo",
                            Simbolo = "$"
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            Codigo = "USD",
                            Nombre = "Dólar Americano",
                            Simbolo = "US$"
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            Codigo = "UI",
                            Nombre = "Unidad Indexada",
                            Simbolo = "UI"
                        });
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.Poliza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Aereo")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("App_id")
                        .HasColumnType("int");

                    b.Property<int?>("Asignado")
                        .HasColumnType("int");

                    b.Property<int?>("Caldsc")
                        .HasColumnType("int");

                    b.Property<int?>("Cancecod")
                        .HasColumnType("int");

                    b.Property<int?>("Cat_cli")
                        .HasColumnType("int");

                    b.Property<int?>("Catdsc")
                        .HasColumnType("int");

                    b.Property<string>("Clausula")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Clinom")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("Clinro")
                        .HasColumnType("int");

                    b.Property<int?>("Clinro1")
                        .HasColumnType("int");

                    b.Property<decimal?>("Clipcupfia")
                        .HasColumnType("decimal(15,2)");

                    b.Property<int?>("Coberturas_bicicleta")
                        .HasColumnType("int");

                    b.Property<string>("Com_alias")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Com_bo")
                        .HasColumnType("int");

                    b.Property<int?>("Com_bro")
                        .HasColumnType("int");

                    b.Property<int?>("Com_sub_corr")
                        .HasColumnType("int");

                    b.Property<string>("Combustibles")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Comcod")
                        .HasColumnType("int");

                    b.Property<int?>("Comcod1")
                        .HasColumnType("int");

                    b.Property<int?>("Comcod2")
                        .HasColumnType("int");

                    b.Property<string>("Conaccicer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Conafesin")
                        .HasColumnType("int");

                    b.Property<int?>("Conanioaut")
                        .HasColumnType("int");

                    b.Property<string>("Conautcome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Conautcor")
                        .HasColumnType("int");

                    b.Property<bool>("Conautcort")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Conautnd")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Conbanemb")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Conbonant")
                        .HasColumnType("int");

                    b.Property<int?>("Conbonnsin")
                        .HasColumnType("int");

                    b.Property<string>("Concalcom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("Concan")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal?>("Concapase")
                        .HasColumnType("decimal(15,2)");

                    b.Property<int?>("Concapaut")
                        .HasColumnType("int");

                    b.Property<decimal?>("Concapla")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal?>("Concapret")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("Concar")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Concaraut")
                        .HasColumnType("int");

                    b.Property<string>("Concaucan")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Concaudsc")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("Concerfin")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Concesnom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Concestel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Conchasis")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Conclaaut")
                        .HasColumnType("int");

                    b.Property<string>("Conclaemb")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Conclieda")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Concodrev")
                        .HasColumnType("int");

                    b.Property<decimal?>("Concomcorr")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime?>("Concomdes")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("Concomotr")
                        .HasColumnType("decimal(15,2)");

                    b.Property<int?>("Conconesp")
                        .HasColumnType("int");

                    b.Property<string>("Conconf")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Concuo")
                        .HasColumnType("int");

                    b.Property<string>("Condecaju")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal?>("Condecpri")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal?>("Condecpro")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal?>("Condecptj")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("Condecram")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Condecrea")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("Condedaut")
                        .HasColumnType("int");

                    b.Property<int?>("Condednum")
                        .HasColumnType("int");

                    b.Property<string>("Condedurc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Condeta")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Condetail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Condetemb")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Condetrc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Condom")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Conedaret")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("Conend")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Conesp")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Conespbon")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Confabemb")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Confchcan")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Confchdes")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Confchhas")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Conficto")
                        .HasColumnType("int");

                    b.Property<decimal?>("Conflota")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal?>("Conflotimp")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal?>("Conflotsaldo")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal?>("Conflottotal")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal?>("Congar")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("Congaran")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Congarantel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Conges")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Congeses")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Congesfi")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Congesti")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Congrucon")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Conidpad")
                        .HasColumnType("int");

                    b.Property<decimal?>("Conimp")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal?>("Conimprf")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("Conincuno")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Coning")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Conlimnav")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("Conlinflot")
                        .HasColumnType("int");

                    b.Property<int?>("Conlinrie")
                        .HasColumnType("int");

                    b.Property<string>("Conmaraut")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Conmataut")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Conmatemb")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Conmatpar")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Conmatriemb")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Conmatte")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Conmedtra")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Conmotor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Connomemb")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Connroint")
                        .HasColumnType("int");

                    b.Property<string>("Connrorc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Connroser")
                        .HasColumnType("int");

                    b.Property<decimal?>("Conobjtot")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("Conpadaut")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Conpadend")
                        .HasColumnType("int");

                    b.Property<int?>("Conpadre")
                        .HasColumnType("int");

                    b.Property<string>("Conpol")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("Conpremio")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal?>("Conpricap")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("Conptoemb")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("Conrecfin")
                        .HasColumnType("decimal(15,2)");

                    b.Property<int?>("Conresciv")
                        .HasColumnType("int");

                    b.Property<int?>("Conriecod")
                        .HasColumnType("int");

                    b.Property<string>("Conriedsc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Consta")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("Consumsal")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("Contipoemp")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal?>("Contot")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal?>("Contotant")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal?>("Contotpri")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("Contpoact")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Contpocob")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Contpoemb")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Contpoemp")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Contra")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Conubi")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<decimal?>("Convalacr")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal?>("Convallet")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("Convelemb")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Conviaa")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal?>("Conviacos")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("Conviades")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Conviaenb")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Conviafac")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("Conviafle")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal?>("Conviagas")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal?>("Conviakb")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal?>("Conviakn")
                        .HasColumnType("decimal(15,2)");

                    b.Property<int?>("Conviamon")
                        .HasColumnType("int");

                    b.Property<decimal?>("Conviapri")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal?>("Conviarec")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal?>("Conviatot")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("Conviatpo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Conviatra")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Convig")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("Corrnom")
                        .HasColumnType("int");

                    b.Property<string>("Cotizacion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("Desdsc")
                        .HasColumnType("int");

                    b.Property<string>("DocumentoPdf")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("Dptnom")
                        .HasColumnType("int");

                    b.Property<bool>("Enviado")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Exportacion")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Facturacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Flocod")
                        .HasColumnType("int");

                    b.Property<string>("Forpagvid")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Gestion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Granizo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Idorden")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Importacion")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Ingresado")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Last_update")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Leer")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Leer_obs")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Lincarta")
                        .HasColumnType("int");

                    b.Property<int?>("Linexclu")
                        .HasColumnType("int");

                    b.Property<int?>("Lininclu")
                        .HasColumnType("int");

                    b.Property<int?>("Linobs")
                        .HasColumnType("int");

                    b.Property<bool>("Llamar")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Maritimo")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Max_aereo")
                        .HasColumnType("int");

                    b.Property<int?>("Max_mar")
                        .HasColumnType("int");

                    b.Property<int?>("Max_terrestre")
                        .HasColumnType("int");

                    b.Property<bool>("Mis_rie")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Modcod")
                        .HasColumnType("int");

                    b.Property<int?>("Moncod")
                        .HasColumnType("int");

                    b.Property<string>("Mot_no_ren")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Motivos_no_renovacion")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Offshore")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Otrcorrcod")
                        .HasColumnType("int");

                    b.Property<int?>("Padreaux")
                        .HasColumnType("int");

                    b.Property<int?>("Pagos_efectivo")
                        .HasColumnType("int");

                    b.Property<bool>("Procesado")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Productos_de_vida")
                        .HasColumnType("int");

                    b.Property<string>("Ramo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Rieres")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Seccod")
                        .HasColumnType("int");

                    b.Property<bool>("Sob_recib")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Sublistas")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("Tarcod")
                        .HasColumnType("int");

                    b.Property<decimal?>("Tasa")
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("Terrestre")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Tiene_alarma")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Tipos_de_alarma")
                        .HasColumnType("int");

                    b.Property<int?>("Tpoconcod")
                        .HasColumnType("int");

                    b.Property<int?>("Tporiecod")
                        .HasColumnType("int");

                    b.Property<string>("Tposegdsc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("Tpovivcod")
                        .HasColumnType("int");

                    b.Property<bool>("Transito_interno")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Update_date")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Var_ubi")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("Activo");

                    b.HasIndex("Clinro");

                    b.HasIndex("Comcod");

                    b.HasIndex("Confchdes");

                    b.HasIndex("Confchhas");

                    b.HasIndex("Conmataut");

                    b.HasIndex("Conpadre");

                    b.HasIndex("Conpol");

                    b.HasIndex("Corrnom");

                    b.HasIndex("Moncod");

                    b.ToTable("Polizas");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.ProcessDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EstadoProcesamiento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaProcesamiento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NombreArchivo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("PolizaId")
                        .HasColumnType("int");

                    b.Property<string>("ResultadoJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RutaArchivo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TipoDocumento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PolizaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("ProcessDocuments");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.Renovation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaSolicitud")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PolizaId")
                        .HasColumnType("int");

                    b.Property<int?>("PolizaNuevaId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PolizaId");

                    b.HasIndex("PolizaNuevaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Renovations");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Email = "admin@sistema.com",
                            FechaCreacion = new DateTime(2025, 5, 26, 16, 8, 52, 542, DateTimeKind.Local).AddTicks(5783),
                            FechaModificacion = new DateTime(2025, 5, 26, 16, 8, 52, 542, DateTimeKind.Local).AddTicks(6023),
                            Nombre = "Administrador"
                        });
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.Poliza", b =>
                {
                    b.HasOne("RegularizadorPolizas.Domain.Entities.Client", "Client")
                        .WithMany("Polizas")
                        .HasForeignKey("Clinro")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RegularizadorPolizas.Domain.Entities.Company", "Company")
                        .WithMany("Polizas")
                        .HasForeignKey("Comcod")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RegularizadorPolizas.Domain.Entities.Poliza", "PolizaPadre")
                        .WithMany("PolizasHijas")
                        .HasForeignKey("Conpadre")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RegularizadorPolizas.Domain.Entities.Broker", "Broker")
                        .WithMany("Polizas")
                        .HasForeignKey("Corrnom")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RegularizadorPolizas.Domain.Entities.Currency", "Currency")
                        .WithMany("Polizas")
                        .HasForeignKey("Moncod")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Broker");

                    b.Navigation("Client");

                    b.Navigation("Company");

                    b.Navigation("Currency");

                    b.Navigation("PolizaPadre");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.ProcessDocument", b =>
                {
                    b.HasOne("RegularizadorPolizas.Domain.Entities.Poliza", "Poliza")
                        .WithMany("ProcessDocuments")
                        .HasForeignKey("PolizaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RegularizadorPolizas.Domain.Entities.User", "User")
                        .WithMany("ProcessDocuments")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Poliza");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.Renovation", b =>
                {
                    b.HasOne("RegularizadorPolizas.Domain.Entities.Poliza", "PolizaOriginal")
                        .WithMany("RenovacionesOrigen")
                        .HasForeignKey("PolizaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RegularizadorPolizas.Domain.Entities.Poliza", "PolizaNueva")
                        .WithMany("RenovacionesDestino")
                        .HasForeignKey("PolizaNuevaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RegularizadorPolizas.Domain.Entities.User", "User")
                        .WithMany("Renovations")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("PolizaNueva");

                    b.Navigation("PolizaOriginal");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.Broker", b =>
                {
                    b.Navigation("Polizas");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.Client", b =>
                {
                    b.Navigation("Polizas");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.Company", b =>
                {
                    b.Navigation("Polizas");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.Currency", b =>
                {
                    b.Navigation("Polizas");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.Poliza", b =>
                {
                    b.Navigation("PolizasHijas");

                    b.Navigation("ProcessDocuments");

                    b.Navigation("RenovacionesDestino");

                    b.Navigation("RenovacionesOrigen");
                });

            modelBuilder.Entity("RegularizadorPolizas.Domain.Entities.User", b =>
                {
                    b.Navigation("ProcessDocuments");

                    b.Navigation("Renovations");
                });
#pragma warning restore 612, 618
        }
    }
}
